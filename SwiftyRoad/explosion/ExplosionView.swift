//
// ExplosionView.swift
// Generated by Core Animator version 1.0 on 24/02/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class ExplosionView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

    init() {
		super.init(frame: CGRect(x: 0, y: 0, width: 165, height: 176))
		self.setupHierarchy()
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:165, height:176)
		__scaling__.center = CGPoint(x:82.5, y:88.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let blam = UIView()
		blam.bounds = CGRect(x:0, y:0, width:407.0, height:380.0)
		blam.layer.position = CGPoint(x:66.852, y:63.961)
		__scaling__.addSubview(blam)
		viewsByName["blam"] = blam

		let blam1 = UIImageView()
		blam1.bounds = CGRect(x:0, y:0, width:407.0, height:380.0)
		var imgBlam1: UIImage!
		if let imagePath = bundle.pathForResource("blam1.png", ofType:nil) {
			imgBlam1 = UIImage(contentsOfFile:imagePath)
		}
		blam1.image = imgBlam1
		blam1.contentMode = .Center;
		blam1.layer.position = CGPoint(x:203.500, y:190.000)
		blam.addSubview(blam1)
		viewsByName["blam1"] = blam1

		let blam3 = UIImageView()
		blam3.bounds = CGRect(x:0, y:0, width:280.0, height:261.0)
		var imgBlam3: UIImage!
		if let imagePath = bundle.pathForResource("blam3.png", ofType:nil) {
			imgBlam3 = UIImage(contentsOfFile:imagePath)
		}
		blam3.image = imgBlam3
		blam3.contentMode = .Center;
		blam3.layer.position = CGPoint(x:204.945, y:190.738)
		blam.addSubview(blam3)
		viewsByName["blam3"] = blam3

		let blam2 = UIImageView()
		blam2.bounds = CGRect(x:0, y:0, width:135.0, height:126.0)
		var imgBlam2: UIImage!
		if let imagePath = bundle.pathForResource("blam2.png", ofType:nil) {
			imgBlam2 = UIImage(contentsOfFile:imagePath)
		}
		blam2.image = imgBlam2
		blam2.contentMode = .Center;
		blam2.layer.position = CGPoint(x:210.906, y:196.703)
		blam.addSubview(blam2)
		viewsByName["blam2"] = blam2

		self.viewsByName = viewsByName
	}

	// - MARK: explode

	func addExplodeAnimation() {
        addExplodeAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addExplodeAnimation(completion: ((Bool) -> Void)?) {
		addExplodeAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addExplodeAnimation(#removedOnCompletion: Bool) {
		addExplodeAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addExplodeAnimation(#removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addExplodeAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addExplodeAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Explode")
			self.animationCompletions[layer.animationForKey("Explode")] = complete
		}

		let blam1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		blam1ScaleXAnimation.duration = 1.500
		blam1ScaleXAnimation.values = [1.000 as Float, 1.220 as Float, 1.000 as Float, 1.220 as Float, 1.000 as Float, 0.810 as Float, 0.810 as Float]
		blam1ScaleXAnimation.keyTimes = [0.000 as Float, 0.200 as Float, 0.267 as Float, 0.333 as Float, 0.400 as Float, 0.800 as Float, 1.000 as Float]
		blam1ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		blam1ScaleXAnimation.beginTime = beginTime
		blam1ScaleXAnimation.fillMode = fillMode
		blam1ScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["blam1"]?.layer.addAnimation(blam1ScaleXAnimation, forKey:"explode_ScaleX")

		let blam1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		blam1ScaleYAnimation.duration = 1.500
		blam1ScaleYAnimation.values = [1.000 as Float, 1.220 as Float, 1.000 as Float, 1.220 as Float, 1.000 as Float, 0.810 as Float, 0.810 as Float]
		blam1ScaleYAnimation.keyTimes = [0.000 as Float, 0.200 as Float, 0.267 as Float, 0.333 as Float, 0.400 as Float, 0.800 as Float, 1.000 as Float]
		blam1ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		blam1ScaleYAnimation.beginTime = beginTime
		blam1ScaleYAnimation.fillMode = fillMode
		blam1ScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["blam1"]?.layer.addAnimation(blam1ScaleYAnimation, forKey:"explode_ScaleY")

		let blamOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		blamOpacityAnimation.duration = 1.500
		blamOpacityAnimation.values = [0.000 as Float, 1.000 as Float, 1.000 as Float, 0.000 as Float]
		blamOpacityAnimation.keyTimes = [0.000 as Float, 0.233 as Float, 0.667 as Float, 1.000 as Float]
		blamOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		blamOpacityAnimation.beginTime = beginTime
		blamOpacityAnimation.fillMode = fillMode
		blamOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["blam"]?.layer.addAnimation(blamOpacityAnimation, forKey:"explode_Opacity")

		let blam3ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		blam3ScaleXAnimation.duration = 1.500
		blam3ScaleXAnimation.values = [1.000 as Float, 0.800 as Float, 1.000 as Float, 0.800 as Float, 1.000 as Float, 0.750 as Float, 0.750 as Float]
		blam3ScaleXAnimation.keyTimes = [0.000 as Float, 0.200 as Float, 0.267 as Float, 0.333 as Float, 0.400 as Float, 0.800 as Float, 1.000 as Float]
		blam3ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		blam3ScaleXAnimation.beginTime = beginTime
		blam3ScaleXAnimation.fillMode = fillMode
		blam3ScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["blam3"]?.layer.addAnimation(blam3ScaleXAnimation, forKey:"explode_ScaleX")

		let blam3ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		blam3ScaleYAnimation.duration = 1.500
		blam3ScaleYAnimation.values = [1.000 as Float, 0.800 as Float, 1.000 as Float, 0.800 as Float, 1.000 as Float, 0.750 as Float, 0.750 as Float]
		blam3ScaleYAnimation.keyTimes = [0.000 as Float, 0.200 as Float, 0.267 as Float, 0.333 as Float, 0.400 as Float, 0.800 as Float, 1.000 as Float]
		blam3ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		blam3ScaleYAnimation.beginTime = beginTime
		blam3ScaleYAnimation.fillMode = fillMode
		blam3ScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["blam3"]?.layer.addAnimation(blam3ScaleYAnimation, forKey:"explode_ScaleY")

		let blam2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		blam2ScaleXAnimation.duration = 1.500
		blam2ScaleXAnimation.values = [1.000 as Float, 1.350 as Float, 1.000 as Float, 1.330 as Float, 1.000 as Float, 1.160 as Float, 1.160 as Float]
		blam2ScaleXAnimation.keyTimes = [0.000 as Float, 0.200 as Float, 0.267 as Float, 0.333 as Float, 0.400 as Float, 0.767 as Float, 1.000 as Float]
		blam2ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		blam2ScaleXAnimation.beginTime = beginTime
		blam2ScaleXAnimation.fillMode = fillMode
		blam2ScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["blam2"]?.layer.addAnimation(blam2ScaleXAnimation, forKey:"explode_ScaleX")

		let blam2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		blam2ScaleYAnimation.duration = 1.500
		blam2ScaleYAnimation.values = [1.000 as Float, 1.350 as Float, 1.000 as Float, 1.330 as Float, 1.000 as Float, 1.160 as Float, 1.160 as Float]
		blam2ScaleYAnimation.keyTimes = [0.000 as Float, 0.200 as Float, 0.267 as Float, 0.333 as Float, 0.400 as Float, 0.767 as Float, 1.000 as Float]
		blam2ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		blam2ScaleYAnimation.beginTime = beginTime
		blam2ScaleYAnimation.fillMode = fillMode
		blam2ScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["blam2"]?.layer.addAnimation(blam2ScaleYAnimation, forKey:"explode_ScaleY")
	}

	func removeExplodeAnimation() {
		self.layer.removeAnimationForKey("Explode")
		self.viewsByName["blam1"]?.layer.removeAnimationForKey("explode_ScaleX")
		self.viewsByName["blam1"]?.layer.removeAnimationForKey("explode_ScaleY")
		self.viewsByName["blam"]?.layer.removeAnimationForKey("explode_Opacity")
		self.viewsByName["blam3"]?.layer.removeAnimationForKey("explode_ScaleX")
		self.viewsByName["blam3"]?.layer.removeAnimationForKey("explode_ScaleY")
		self.viewsByName["blam2"]?.layer.removeAnimationForKey("explode_ScaleX")
		self.viewsByName["blam2"]?.layer.removeAnimationForKey("explode_ScaleY")
	}

	override func animationDidStop(anim: CAAnimation!, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("Explode")
	}
}